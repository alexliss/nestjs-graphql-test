# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CommentModel {
  createdAt: DateTime!
  id: ID!
  parentId: ID!
  postId: ID!
  rating: Int!
  text: String!
  userId: ID!
  username: String!
}

type CommentModelEdge {
  cursor: String!
  node: CommentModel!
}

input CreateCommentInput {
  parentId: String!
  postId: ID!
  text: String!
}

input CreatePostInput {
  tags: [String!]
  text: String
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LoginModel {
  comments: PaginatedCommentModel!
  createdAt: DateTime!
  email: String!
  id: ID!
  posts: PaginatedPostModel!
  token: String!
  username: String!
}

type Mutation {
  create(comment: CreateCommentInput!): CommentModel!
  delete(id: String!): CommentModel!
  deletePost(id: String!): String!
  edit(comment: UpdateCommentInput!, id: String!): CommentModel!
  editPost(editedData: UpdatePostInput!, id: String!): PostModel!
  login(userData: UserLoginInput!): LoginModel!
  newPost(post: CreatePostInput!): PostModel!
  register(userData: UserRegisterInput!): LoginModel!
  update(userData: UserUpdateInput!): UserModel!
  voteComment(id: ID!, vote: Int!): CommentModel!
  votePost(id: ID!, vote: Int!): PostModel!
}

type PaginatedCommentModel {
  edges: [CommentModelEdge!]
  hasNextPage: Boolean!
  nodes: [CommentModel!]
  totalCount: Int!
}

type PaginatedPostModel {
  edges: [PostModelEdge!]
  hasNextPage: Boolean!
  nodes: [PostModel!]
  totalCount: Int!
}

type PaginatedUserModel {
  edges: [UserModelEdge!]
  hasNextPage: Boolean!
  nodes: [UserModel!]
  totalCount: Int!
}

type PostModel {
  comments: PaginatedCommentModel
  commentsCount: Int
  createdAt: DateTime!
  id: ID!
  rating: Int!
  tags: [String!]
  text: String
  title: String!
  userId: ID!
  username: String!
}

type PostModelEdge {
  cursor: String!
  node: PostModel!
}

type Query {
  feed(lastCursor: String, offset: Float!, sortSetting: String!): PaginatedPostModel!
  getById(id: String!): CommentModel!
  getByPostId(lastCursor: String, offset: Float!, postId: String!, sortSetting: String!): [CommentModel!]!
  me: UserModel!
  post(id: String!): PostModel!
  user(id: String!): UserModel!
  userPosts(id: String!, lastCursor: String, offset: Float!, sortSetting: String!): PaginatedPostModel!
  users(lastCursor: String, offset: Float!): PaginatedUserModel!
}

input UpdateCommentInput {
  text: String
}

input UpdatePostInput {
  tags: [String!]
  text: String
  title: String
}

input UserLoginInput {
  email: String!
  password: String!
}

type UserModel {
  comments: PaginatedCommentModel!
  createdAt: DateTime!
  email: String!
  id: ID!
  posts: PaginatedPostModel!
  username: String!
}

type UserModelEdge {
  cursor: String!
  node: UserModel!
}

input UserRegisterInput {
  email: String!
  password: String!
  username: String!
}

input UserUpdateInput {
  email: String
  password: String
  username: String
}